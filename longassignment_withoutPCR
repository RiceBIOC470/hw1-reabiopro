
% Homework 1. Due before class on 9/5/17

%% Problem 1 - addition with strings

% Fill in the blank space in this section with code that will add 
% the two numbers regardless of variable type. Hint see the matlab
% functions ischar, isnumeric, and str2num. 

%your code should work no matter which of these lines is uncommented. 
x = 3; y = 5; % integers
%x = '3'; y= '5'; %strings
%x = 3; y = '5'; %mixed

%your code goes here

C = cell(1, 2);
C{1,1}= x;
C{1,2}= y;
if ischar(C{1,1})== 1
   x = str2num(x);
end   
if  ischar(C{1,2})== 1   
    y = str2num(y);
end
b = x + y;

 

%output your answer
fprintf('The sum of numbers x+y is %d',b);


%% Problem 2 - our first real biology problem. Open reading frames and nested loops.

%part 1: write a piece of code that creates a random DNA sequence of length
% N (i.e. consisting of the letters ATGC) where we will start with N=500 base pairs (b.p.).
% store the output in a variable
% called rand_seq. Hint: the function randi may be useful. 
% Even if you have access to the bioinformatics toolbox, 
% do not use the builtin function randseq for this part. 

%N = 500; % define sequence length

disp('PROBLEM 2');

table = ['A', 'T', 'G', 'C'];
rand_seq = randi([1 4],[500,1]);
rand_seq = table(rand_seq);
rand_seq;

%part 2: open reading frames (ORFs) are pieces of DNA that can be
% transcribed and translated. They start with a start codon (ATG) and end with a
% stop codon (TAA, TGA, or TAG). Write a piece of code that finds the longest ORF 
% in your seqeunce rand_seq. Hint: see the function strfind.


start = strfind(rand_seq,'ATG');
end1 = strfind(rand_seq,'TAA');
end2 = strfind(rand_seq,'TGA');
end3 = strfind(rand_seq,'TAG');
ends = [end1,end2,end3];

disp('"for" loop below')
max_length = 0;
for i = start
    for j = ends
        long = j-i;
        if max_length < long
           
           max_length=long;
           besti = i;
           bestj = j;
        end
    end
end
rand_seq(besti:bestj+2);
    


%part 3: copy your code in parts 1 and 2 but place it inside a loop that
% runs 1000 times. Use this to determine the probability
% that an sequence of length 500 has an ORF of greater than 50 b.p.

table = ['A', 'T', 'G', 'C'];
 rand_seq = randi([1 4],[500,1]);
 rand_seq = table(rand_seq);
 rand_seq;

n = 1000;
result = cell(1,n);
for k=1:n
    table = ['A', 'T', 'G', 'C'];
    rand_seq = randi([1 4],[500,1]);
    rand_seq = table(rand_seq);
    result{k} = rand_seq;
end

a = 0;
for y = result
  
    seq=y{1};
    start = strfind(seq,'ATG');
    end1 = strfind(seq,'TAA');
    end2 = strfind(seq,'TGA');
    end3 = strfind(seq,'TAG');
    ends = [end1,end2,end3];
    max_length = 0;
    besti = 0;
    bestj = 0;
    for i = start
        for j = ends
            long = j-i;
            if max_length < long
                max_length =long;
                besti = i;
                bestj = j;
            end
        end
    end
    if besti > 0 
       ORF = seq(besti:bestj+2);
       a = a + (length(ORF)>= 50);
    else
        disp("No solution")
    end
end
 prob = 100*(a/n);
fprintf(['The probability is %d %%'], prob)

%part 4: copy your code from part 3 but put it inside yet another loop,
% this time over the sequence length N. Plot the probability of having an
% ORF > 50 b.p. as a function of the sequence length. 

prob = zeros(1, 500)
for N= (1:500)
    table = ['A', 'T', 'G', 'C'];
    rand_seq = randi([1 4],[N,1]);
    rand_seq = table(rand_seq);
    rand_seq;
    
    n = 1000;
    result = cell(1,n);
    for k=1:n
        table = ['A', 'T', 'G', 'C'];
        rand_seq = randi([1 4],[N,1]);
        rand_seq = table(rand_seq);
        result{k} = rand_seq;
    end
    
    a = 0;
    for y = result
        
        seq=y{1};
        start = strfind(seq,'ATG');
        end1 = strfind(seq,'TAA');
        end2 = strfind(seq,'TGA');
        end3 = strfind(seq,'TAG');
        ends = [end1,end2,end3];
        max_length = 0;
        besti = 0;
        bestj = 0;
        for i = start
            for j = ends
                long = j-i;
                if max_length < long
                    max_length =long;
                    besti = i;
                    bestj = j;
                end
            end
        end
        if besti > 0
            ORF = seq(besti:bestj+2);
            a = a + (length(ORF)>= 50);
            %else
            %   disp("No solution");
        end
    end
    prob(N) = 100*(a/n);
    
 
end
scatter(1:500,prob)

%scatter(1:500,prob)
%fprintf(['\n Iteration: %d The probability is %d %%'],N, prob);  
